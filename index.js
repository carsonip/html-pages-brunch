'use strict';

const minify = require('html-minifier').minify;
const sysPath = require('path');

const DEFAULT_PATTERN = /\.html$/;
const DEFAULT_HTMLMIN_OPTIONS = {
  caseSensitive: false,
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: false,
  collapseWhitespace: true,
  conservativeCollapse: false,
  html5: true,
  includeAutoGeneratedTags: false,
  keepClosingSlash: false,
  minifyCSS: true,
  minifyJS: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: true,
  removeOptionalTags: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortAttributes: true,
  sortClassName: true
};

const DEFAULT_DESTINATION_FN = path => {
  return path.replace(/^app[\/\\]/, '');
};

class HtmlPages {
  constructor(config) {
    if (config === undefined) config = {};
    if (config.plugins === undefined) config.plugins = {};

    const pluginConfig = config.plugins.htmlPages || {};
    this.publicPath = config.paths.public;
    this.destinationFn = pluginConfig.destination || DEFAULT_DESTINATION_FN;
    this.disabled = pluginConfig.disabled;
    this.pattern = pluginConfig.pattern || DEFAULT_PATTERN;
    this.htmlMinOptions = pluginConfig.htmlMin ?
      Object.assign({}, pluginConfig.htmlMin) :
      DEFAULT_HTMLMIN_OPTIONS;
  }

  optimize(file) {
    const data = file.data;
    const path = file.path;

    return new Promise(resolve => {
      resolve({
        data: this.disabled ? data : minify(data, this.htmlMinOptions),
        path: sysPath.join(this.publicPath, this.destinationFn(path))
      });
    });
  }
}

HtmlPages.prototype.brunchPlugin = true;
HtmlPages.prototype.type = 'template';

module.exports = HtmlPages;

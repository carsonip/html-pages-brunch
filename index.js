'use strict';

var minify = require('html-minifier').minify,
  fs = require('fs'),
  fspath = require('path'),
  mkdirp = require('mkdirp'),
  _ = require('lodash');

class HtmlPages {

  constructor(config) {
    this.publicPath = fspath.resolve(config.paths['public']);

    if (config === undefined) config = {};
    if (config.plugins === undefined) config.plugins = {};
    const pluginConfig = config.plugins.htmlPages || {};
    this.destinationFn = pluginConfig.destination || this.DEFAULT_DESTINATION_FN;
    this.disabled = pluginConfig.disabled || this.DISABLED_SETTING;
    this.pattern = pluginConfig.pattern || this.DEFAULT_PATTERN;
    this.htmlMinOptions = pluginConfig.htmlMin ?
      _.clone(pluginConfig.htmlMin) :
      this.DEFAULT_HTMLMIN_OPTIONS;
  }

  DEFAULT_DESTINATION_FN(path) {
    return path.replace(/^app[\/\\](.*)\.html$/, '$1.html');
  }

  compile(data, path, callback) {
    let destinationDir, destinationPath, err, error, result;
    try {
      result = this.disabled ? data : minify(data, this.htmlMinOptions);
      destinationPath = this.destinationFn(path);
      destinationPath = fspath.join(this.publicPath, destinationPath);
      destinationDir = fspath.dirname(destinationPath);
      mkdirp.sync(destinationDir);
      return fs.writeFileSync(destinationPath, result);
    } catch (_error) {
      err = _error;
      console.error(`Error while processing '${path}': ${err.toString()}`);
      return error = err;
    } finally {
      return callback(error, '');
    }
  }
}

HtmlPages.prototype.brunchPlugin = true;
HtmlPages.prototype.type = 'template';

HtmlPages.prototype.DEFAULT_PATTERN = /\.html$/;

HtmlPages.prototype.DEFAULT_HTMLMIN_OPTIONS = {
  caseSensitive: false,
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: false,
  collapseWhitespace: true,
  conservativeCollapse: false,
  html5: true,
  includeAutoGeneratedTags: false,
  keepClosingSlash: false,
  minifyCSS: true,
  minifyJS: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: true,
  removeOptionalTags: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortAttributes: true,
  sortClassName: true
};

HtmlPages.prototype.DISABLED_SETTING = false;

module.exports = HtmlPages;
